version: 2.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.9
    working_directory: ~/repo
  curl-executor:
    docker:
      - image: curlimages/curl:latest
    working_directory: ~/repo

orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0
  ggshield: gitguardian/ggshield@volatile

jobs:
  install_dependencies:
    executor: python-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r app/requirements.txt

      - save_cache:
          paths:
            - ~/.cache/pip
            - venv
          key: v1-dependencies-{{ checksum "app/requirements.txt" }}

  linting:
    executor: python-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-

      - run:
          name: Run Pylint
          command: |
            . venv/bin/activate
            pylint --rcfile=app/.pylintrc app/app.py

  test_coverage:
    executor: python-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-

      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            pytest -v --tb=short

      - run:
          name: Run coverage
          command: |
            . venv/bin/activate
            mkdir -p coverage_reports
            pytest --cov=app --cov-report=xml:coverage_reports/coverage.xml app/test_app.py
      
      - persist_to_workspace:
          root: .
          paths:
            - coverage_reports

      - run:
          name: Finished dev pipeline
          command: |
            echo "Finished dev pipeline"

  sonarqube_scan:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - sonarcloud/scan
            
      - run:
          name: Finished main pipeline
          command: |
            echo "Finished main pipeline"

  generate-release-tag:
    executor: python-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-

      - run:
          name: Generate new version tag
          command: |
            LATEST_TAG=$(git describe --tags --match "v*" --abbrev=0 || echo "v0.0.0")
            echo "Latest tag: $LATEST_TAG"
            
            NEW_TAG=$(python -c "from packaging.version import Version as V; print('v' + str(V('${LATEST_TAG}'.lstrip('v')).major) + '.' + str(V('${LATEST_TAG}'.lstrip('v')).minor + 1) + '.0')")
            echo "New version: $NEW_TAG"
            echo "export NEW_TAG=$NEW_TAG" >> $BASH_ENV

            git config --global user.email "ci-bot@example.com"
            git config --global user.name "CircleCI Bot"

            git tag $NEW_TAG
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git
            git push origin $NEW_TAG

      - run:
          name: Generate Changelog
          command: |
            echo "## Changelog for $NEW_TAG" > changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"- %h %s (%an)" $(git describe --tags --abbrev=0 @^)..@ >> changelog.md
            cat changelog.md
            CHANGELOG_CONTENT=$(jq -Rs . < changelog.md)
            echo "export CHANGELOG_CONTENT='$CHANGELOG_CONTENT'" >> $BASH_ENV

      - run:
          name: Create GitHub Release
          command: |
            curl -X POST -H "Authorization: token ${GITHUB_TOKEN}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${GITHUB_REPO}/releases \
                 -d "{
                      \"tag_name\": \"${NEW_TAG}\",
                      \"name\": \"Release ${NEW_TAG}\",
                      \"body\": ${CHANGELOG_CONTENT:-\"No changelog available.\},
                      \"draft\": false,
                      \"prerelease\": false
                  }"

  build-and-push-main:
    executor: python-executor
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Get version from Git Tag
          command: |
            TAG=$(git describe --tags --match "v*" --abbrev=0)
            echo "export IMAGE_VERSION=${TAG}" >> $BASH_ENV
      - run:
          name: Build Docker Image
          command: docker build -t ${DOCKERHUB_USERNAME}/cicd_practica:${IMAGE_VERSION} .
      - run:
          name: Login en Docker Hub (para producci√≥n)
          command: echo "${dockerhub}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
      - run:
          name: Upload image to Docker Hub with version and latest
          command: |
            docker push ${DOCKERHUB_USERNAME}/cicd_practica:${IMAGE_VERSION}
            docker tag ${DOCKERHUB_USERNAME}/cicd_practica:${IMAGE_VERSION} ${DOCKERHUB_USERNAME}/cicd_practica:latest
            docker push ${DOCKERHUB_USERNAME}/cicd_practica:latest

workflows:
  linting-test-coverage:
    jobs:
      - install_dependencies:
          filters:
            branches:
              only:
                - main
                - dev
      - linting:
          requires:
            - install_dependencies
          filters:
            branches:
              only:
                - main
                - dev
      - test_coverage:
          requires:
            - linting
          filters:
            branches:
              only:
                - main
                - dev
      - ggshield/scan:
          name: ggshield-scan
          base_revision: <<pipeline.git.base_revision>>
          revision: <<pipeline.git.revision>>
          context: GitGuardian
          requires:
            - test_coverage
          filters:
            branches:
              only:
                - main
                - dev
      - sonarqube_scan:
          context: SonarCloud
          requires:
            - test_coverage
          filters:
            branches:
              only:
                - main
      - generate-release-tag:
          context: 
            - GitHub
            - DockerHub
          requires:
            - sonarqube_scan
          filters:  
            branches:
              only:
                - main
      - build-and-push-main:
          context: DockerHub
          requires:
            - generate-release-tag
          filters:
            branches:
              only:
                - main         
      
